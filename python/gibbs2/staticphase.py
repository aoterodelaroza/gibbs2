import numpy as np
from scipy.interpolate import interp1d

class StaticPhase:
    """Thermodynamic properties for a static phase calculated by gibbs2."""

    ## constructor
    def __init__(self,name,strl):
        self._name = name

        x = np.genfromtxt(strl)
        self._plist, self._Vlist, self._Elist, self._Hlist = [], [], [], []
        for i in range(x.shape[0]):
            self._plist.append(x[i,0])
            self._Elist.append(x[i,1])
            self._Hlist.append(x[i,2])
            self._Vlist.append(x[i,3])
        self._pkeys = np.unique(np.sort(np.round(self._plist,decimals=2)))
        self._Hinterp = interp1d(self._plist,self._Hlist,'cubic',bounds_error=False,fill_value=np.nan)

    ## interpolated thermodynamic properties
    def H(self,p):
        """Returns the itnerpolated enthalpy."""
        return self._Hinterp(p)

    ## min, max, step temperature and pressure
    @property
    def pmin(self):
        return np.min(self._plist)
    @property
    def pmax(self):
        return np.max(self._plist)
    @property
    def pstep(self):
        return np.min(np.diff(np.unique(np.sort(self._plist))))

    ## representation functions
    def __str__(self):
        return f"Phase {self._name} with {len(self._pkeys)} pressures ({np.min(self._plist)} GPa -> {np.max(self._plist)} GPa)."

def read_staticphases_from_eos_file(eosfile):
    """Read a .eos_static file generated by gibbs2 and return a list
    of phases containing all static properties."""

    phlist = []
    name = None
    with open(eosfile,"r") as f:
        for line in f:
            if line.startswith("# Phase"):
                if name is not None:
                    phlist.append(StaticPhase(name,strl))
                name = line.split()[-1]
                strl = []
            if name is not None and not line.startswith("#") and len(line) > 0:
                strl.append(line)
    if name is not None:
        phlist.append(StaticPhase(name,strl))

    return phlist
