import numpy as np
from scipy.interpolate import interp1d
import copy

class StaticPhase:
    """Thermodynamic properties of a static phase calculated by
    gibbs2. This class is derived from the information written to a
    .eos_static file and is used to create plots and performing tasks
    not done in gibbs2 by default."""

    ## constructors
    def __init__(self,name,strl):
        """Constructor for the staticphase. name is the name of the
        phase and strl is a list of strings with the thermodynamic
        properties obtained from reading the eos_static file (see
        examples)."""

        self._name = name

        ## read the data
        x = np.genfromtxt(strl)
        self._plist = x[:,0]
        self._Elist = x[:,1]
        self._Hlist = x[:,2]
        self._Vlist = x[:,3]

        ## unique temperatures and pressures to within 2 decimal places
        self._pkeys = np.unique(np.sort(np.round(self._plist,decimals=2)))

        ## set up the interpolant
        self._Einterp = interp1d(self._plist,self._Elist,'cubic',bounds_error=False,fill_value=np.nan)
        self._Hinterp = interp1d(self._plist,self._Hlist,'cubic',bounds_error=False,fill_value=np.nan)

    ## interpolated thermodynamic properties
    def H(self,p):
        """Returns the interpolated static enthalpy."""
        return self._Hinterp(p)

    ## min, max, step temperature and pressure
    @property
    def pmin(self):
        return np.min(self._plist)
    @property
    def pmax(self):
        return np.max(self._plist)
    @property
    def pstep(self):
        return np.min(np.diff(np.unique(np.sort(self._plist))))
    @property
    def name(self):
        return self._name

    ## operations
    def __mul__(self,other):
        """Multiply by scalar: all extensive properties are
        multiplied, all intensive properties are left alone. Update
        the name."""
        ph = copy.deepcopy(self)
        ph._Elist *= other
        ph._Hlist *= other
        ph._Einterp = interp1d(ph._plist,ph._Elist,'cubic',bounds_error=False,fill_value=np.nan)
        ph._Hinterp = interp1d(ph._plist,ph._Hlist,'cubic',bounds_error=False,fill_value=np.nan)
        ph._name = f"{other} * {ph.name}"
        return ph
    __rmul__ = __mul__

    ## representation functions
    def __str__(self):
        return f"Phase {self._name} with {len(self._pkeys)} pressures ({np.min(self._plist)} GPa -> {np.max(self._plist)} GPa)."

def read_staticphases_from_eos_file(eosfile):
    """Read a .eos_static file generated by gibbs2 and return a list
    of phases containing all static properties."""

    phlist = []
    name = None
    with open(eosfile,"r") as f:
        for line in f:
            if line.startswith("# Phase"):
                if name is not None:
                    phlist.append(StaticPhase(name,strl))
                name = line.split()[-1]
                strl = []
            if name is not None and not line.startswith("#") and len(line) > 0:
                strl.append(line)
    if name is not None:
        phlist.append(StaticPhase(name,strl))

    return phlist
