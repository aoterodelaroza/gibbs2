import numpy as np
from scipy.interpolate import CloughTocher2DInterpolator

class Phase:
    """Thermodynamic properties for a phase calculated by gibbs2."""

    ## constructor
    def __init__(self,name,strl):
        self._name = name

        x = np.genfromtxt(strl)
        self._plist, self._Tlist, self._Vlist, self._Glist = [], [], [], []
        self._pdict, self._Tdict, self._pTdict = {}, {}, {}
        for i in range(x.shape[0]):
            self._plist.append(x[i,0])
            self._Tlist.append(x[i,1])
            self._Vlist.append(x[i,2])
            self._Glist.append(x[i,4])

        self._Tkeys = np.unique(np.sort(np.round(self._Tlist,decimals=2)))
        self._pkeys = np.unique(np.sort(np.round(self._plist,decimals=2)))

        self._Ginterp = CloughTocher2DInterpolator(list(zip(self._plist, self._Tlist)), self._Glist)

    ## interpolated thermodynamic properties
    def G(self,p,T):
        """Returns the itnerpolated Gibbs energy."""
        return self._Ginterp((p,T))

    ## min, max, step temperature and pressure
    @property
    def Tmin(self):
        return np.min(self._Tlist)
    @property
    def Tmax(self):
        return np.max(self._Tlist)
    @property
    def pmin(self):
        return np.min(self._plist)
    @property
    def pmax(self):
        return np.max(self._plist)
    @property
    def Tstep(self):
        return np.min(np.diff(np.unique(np.sort(self._Tlist))))
    @property
    def pstep(self):
        return np.min(np.diff(np.unique(np.sort(self._plist))))

    ## representation functions
    def __str__(self):
        return f"Phase {self._name} with {len(self._pkeys)} pressures and {len(self._Tkeys)} temperatures."

def read_phases_from_eos_file(eosfile):
    """Read a .eos file generated by gibbs2 and return a list of phases containing
    all calculated thermodynamic properties."""

    phlist = []
    name = None
    with open(eosfile,"r") as f:
        for line in f:
            if line.startswith("# Phase"):
                if name is not None:
                    phlist.append(Phase(name,strl))
                name = line.split()[-1]
                strl = []
            if name is not None and not line.startswith("#"):
                strl.append(line)
    if name is not None:
        phlist.append(Phase(name,strl))

    return phlist
